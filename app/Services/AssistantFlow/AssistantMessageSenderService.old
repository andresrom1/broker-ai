<?php

namespace App\Services\AssistantFlow;

use Illuminate\Support\Facades\Log;
use OpenAI\Laravel\Facades\OpenAI;
use App\Services\AssistantFlow\ThreadManagerService; // Necesario para obtener el threadId
use App\Events\AgentMessageSent;

class AssistantMessageSenderService
{
    protected ThreadManagerService $threadManager;
    protected MessageFormatterService $messageFormatter;
    protected string $assistantId; // Necesario para crear el Run

    public function __construct(
        ThreadManagerService $threadManager,
        MessageFormatterService $messageFormatter
    ) {
        $this->threadManager = $threadManager;
        $this->messageFormatter = $messageFormatter;
        $this->assistantId = env('OPENAI_ASSISTANT_ID', 'asst_8XHbWmWOrpTeqKKB23nsk3Hh'); // Asegúrate de que tu ID de asistente esté en .env
    }

    /**
     * Envía un mensaje desde el sistema (como si fuera el asistente) a un hilo de usuario.
     *
     * @param string $sessionId El ID de la sesión del usuario (para obtener el thread ID).
     * @param string $rawMessageContent El contenido del mensaje en texto plano (con \n para saltos de línea).
     * @return bool True si el mensaje fue añadido al thread y se inició un Run, false en caso contrario.
     */
    public function sendSystemMessageToUser(string $sessionId, string $rawMessageContent): bool
    {
        Log::info('Attempting to send system message to user thread.', ['session_id' => $sessionId]);

        try {
            // 1. Obtener o crear el thread ID para la sesión del usuario
            $threadId = $this->threadManager->getOrCreateThread($sessionId);
            Log::info('Thread ID obtained for system message sending', ['thread_id' => $threadId, 'session_id' => $sessionId]);

            // 2. Formatear el mensaje para visualización web (convertir \n a <br>)
            $formattedMessage = $this->messageFormatter->unescapeNewlinesAndFormatForWeb($rawMessageContent);
            
            // 3. Añadir el mensaje al thread como un mensaje de asistente (sistema)
            OpenAI::threads()->messages()->create($threadId, [
                'role'    => 'assistant',
                'content' => $formattedMessage,
            ]);
            Log::info('System message added to thread.', ['thread_id' => $threadId, 'message_preview' => substr($formattedMessage, 0, 100) . '...']);

            // 4. Crear un nuevo Run para asegurar que el mensaje sea procesado y aparezca en el frontend.
            // No necesitamos polling aquí, solo disparar el Run.
            OpenAI::threads()->runs()->create(
                $threadId,
                ['assistant_id' => $this->assistantId]
            );
            Log::info('Run initiated to push system message.', ['thread_id' => $threadId]);

            event(new AgentMessageSent($formattedMessage, $sessionId));
            
            return true;

        } catch (\Exception $e) {
            Log::error('Failed to send system message to user thread.', [
                'session_id' => $sessionId,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
            ]);
            return false;
        }
    }
}